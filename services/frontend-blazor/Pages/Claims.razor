@page "/claims"
@using Microsoft.AspNetCore.Authorization
@using BlazorApp.Services
@using BlazorApp.Models.DTOs
@using System.Security.Claims
@attribute [Authorize]
@inject IClaimsService ClaimsService
@inject IPatientService PatientService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation

<PageTitle>Claims</PageTitle>

<h1><i class="fas fa-file-medical me-2"></i>Claims</h1>

<div class="row mb-3">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header d-flex justify-content-between">
                <h5>Your Claims</h5>
                <a href="/claims/submit" class="btn btn-success">
                    <i class="fas fa-plus me-2"></i>Submit New Claim
                </a>
            </div>
            <div class="card-body">
                @if (loading)
                {
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                else if (!claims.Any())
                {
                    <div class="text-center py-4">
                        <i class="fas fa-file-medical fa-3x text-muted mb-3"></i>
                        <h5>No Claims Found</h5>
                        <p class="text-muted">You haven't submitted any claims yet.</p>
                        <a href="/claims/submit" class="btn btn-success">
                            <i class="fas fa-plus me-2"></i>Submit Your First Claim
                        </a>
                    </div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Claim Number</th>
                                    <th>Service Date</th>
                                    <th>Provider</th>
                                    <th>Amount</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var claim in claims)
                                {
                                    <tr>
                                        <td>@claim.ClaimNumber</td>
                                        <td>@DateTime.Parse(claim.ServiceDate).ToString("MMM dd, yyyy")</td>
                                        <td>@claim.ProviderInfo?.ProviderName</td>
                                        <td>@claim.TotalAmount.ToString("C")</td>
                                        <td>
                                            <span class="badge @GetStatusBadgeClass(claim.Status)">@claim.Status</span>
                                        </td>
                                        <td>
                                            <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewClaim(claim.Id)">
                                                <i class="fas fa-eye me-1"></i>View
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<ClaimResponse> claims = new List<ClaimResponse>();
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadClaims();
    }

    private async Task LoadClaims()
    {
        try
        {
            loading = true;
            
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            
            if (user.Identity?.IsAuthenticated == true)
            {
                // Get the current user's ID from JWT claims
                var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
                if (userIdClaim != null && int.TryParse(userIdClaim.Value, out var userId))
                {
                    // Get the patient record for this user
                    var patient = await PatientService.GetPatientByUserIdAsync(userId);
                    if (patient != null)
                    {
                        // Get claims for this patient
                        claims = await ClaimsService.GetClaimsByPatientAsync(patient.Id);
                    }
                    else
                    {
                        Console.WriteLine($"No patient record found for user {userId}");
                        claims = new List<ClaimResponse>();
                    }
                }
                else
                {
                    Console.WriteLine("Could not get user ID from token");
                    claims = new List<ClaimResponse>();
                }
            }
        }
        catch (Exception ex)
        {
            // Handle error - could show toast notification here
            Console.WriteLine($"Error loading claims: {ex.Message}");
            claims = new List<ClaimResponse>();
        }
        finally
        {
            loading = false;
        }
    }

    private void ViewClaim(int claimId)
    {
        Navigation.NavigateTo($"/claims/{claimId}");
    }

    private string GetStatusBadgeClass(string status)
    {
        return status?.ToLower() switch
        {
            "approved" => "bg-success",
            "denied" => "bg-danger", 
            "under review" or "pending" => "bg-warning",
            "processing" => "bg-info",
            _ => "bg-secondary"
        };
    }
}