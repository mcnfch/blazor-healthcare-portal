@page "/adjuster/claims/submit"
@using Microsoft.AspNetCore.Authorization
@using BlazorApp.Services
@using BlazorApp.Models.DTOs
@using System.ComponentModel.DataAnnotations
@attribute [Authorize]
@inject IClaimsService ClaimsService
@inject IProviderService ProviderService
@inject IInsurancePlanService InsurancePlanService
@inject IPatientService PatientService
@inject IMedicalCodesService MedicalCodesService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Submit Claim</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1><i class="fas fa-plus-circle me-2"></i>Submit New Claim</h1>
    <a href="/claims" class="btn btn-secondary">
        <i class="fas fa-arrow-left me-2"></i>Back to Claims
    </a>
</div>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="fas fa-check-circle me-2"></i>@successMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="fas fa-exclamation-circle me-2"></i>@errorMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<EditForm Model="claimModel" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <div class="row">
        <!-- Left Column -->
        <div class="col-md-8">
            <!-- Basic Information -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5><i class="fas fa-info-circle me-2"></i>Basic Information</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="patientId" class="form-label">Patient *</label>
                                <InputSelect @bind-Value="claimModel.PatientId" class="form-select" id="patientId">
                                    <option value="">Select Patient</option>
                                    @foreach (var patient in patients)
                                    {
                                        <option value="@patient.Id">@patient.FirstName @patient.LastName (@patient.PatientId)</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => claimModel.PatientId)" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="providerId" class="form-label">Healthcare Provider *</label>
                                <InputSelect @bind-Value="claimModel.ProviderId" class="form-select" id="providerId">
                                    <option value="">Select Provider</option>
                                    @foreach (var provider in providers)
                                    {
                                        <option value="@provider.Id">@provider.ProviderName (@provider.ProviderType)</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => claimModel.ProviderId)" class="text-danger" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="insurancePlanId" class="form-label">Insurance Plan *</label>
                                <InputSelect @bind-Value="claimModel.InsurancePlanId" class="form-select" id="insurancePlanId">
                                    <option value="">Select Insurance Plan</option>
                                    @foreach (var plan in insurancePlans)
                                    {
                                        <option value="@plan.Id">@plan.PlanName (@plan.CompanyName)</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => claimModel.InsurancePlanId)" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="claimType" class="form-label">Claim Type *</label>
                                <InputSelect @bind-Value="claimModel.ClaimType" class="form-select" id="claimType">
                                    <option value="">Select Claim Type</option>
                                    <option value="Medical">Medical</option>
                                    <option value="Dental">Dental</option>
                                    <option value="Vision">Vision</option>
                                    <option value="Prescription">Prescription</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => claimModel.ClaimType)" class="text-danger" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Service Details -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5><i class="fas fa-calendar-alt me-2"></i>Service Details</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="serviceDate" class="form-label">Service Date *</label>
                                <InputDate @bind-Value="claimModel.ServiceDate" class="form-control" id="serviceDate" max="@DateTime.Today.ToString("yyyy-MM-dd")" />
                                <ValidationMessage For="@(() => claimModel.ServiceDate)" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="totalAmount" class="form-label">Total Amount *</label>
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <InputNumber @bind-Value="claimModel.TotalAmount" class="form-control" id="totalAmount" step="0.01" min="0" />
                                </div>
                                <ValidationMessage For="@(() => claimModel.TotalAmount)" class="text-danger" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Medical Codes -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5><i class="fas fa-code me-2"></i>Medical Codes</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="diagnosisSearch" class="form-label">Diagnosis Codes</label>
                                <div class="input-group mb-2">
                                    <input @bind="diagnosisSearchTerm" @oninput="SearchDiagnosisCodes" 
                                           class="form-control" id="diagnosisSearch" 
                                           placeholder="Search diagnosis codes..." />
                                    <button type="button" class="btn btn-outline-secondary" @onclick="ClearDiagnosisSearch">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                                @if (diagnosisSearchResults.Any())
                                {
                                    <div class="list-group mb-2" style="max-height: 200px; overflow-y: auto;">
                                        @foreach (var code in diagnosisSearchResults)
                                        {
                                            <button type="button" class="list-group-item list-group-item-action text-start" 
                                                    @onclick="() => AddDiagnosisCode(code)">
                                                <strong>@(code.Code)</strong> - @(code.Description)
                                            </button>
                                        }
                                    </div>
                                }
                                <InputTextArea @bind-Value="diagnosisCodesText" class="form-control" id="diagnosisCodes" rows="3" 
                                             placeholder="Selected diagnosis codes will appear here..."></InputTextArea>
                                <div class="form-text">Search and select codes above, or enter manually</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="procedureSearch" class="form-label">Procedure Codes</label>
                                <div class="input-group mb-2">
                                    <input @bind="procedureSearchTerm" @oninput="SearchProcedureCodes" 
                                           class="form-control" id="procedureSearch" 
                                           placeholder="Search procedure codes..." />
                                    <button type="button" class="btn btn-outline-secondary" @onclick="ClearProcedureSearch">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                                @if (procedureSearchResults.Any())
                                {
                                    <div class="list-group mb-2" style="max-height: 200px; overflow-y: auto;">
                                        @foreach (var code in procedureSearchResults)
                                        {
                                            <button type="button" class="list-group-item list-group-item-action text-start" 
                                                    @onclick="() => AddProcedureCode(code)">
                                                <strong>@(code.Code)</strong> - @(code.Description)
                                            </button>
                                        }
                                    </div>
                                }
                                <InputTextArea @bind-Value="procedureCodesText" class="form-control" id="procedureCodes" rows="3" 
                                             placeholder="Selected procedure codes will appear here..."></InputTextArea>
                                <div class="form-text">Search and select codes above, or enter manually</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Column -->
        <div class="col-md-4">
            <!-- Priority and Summary -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5><i class="fas fa-cog me-2"></i>Settings</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="priorityLevel" class="form-label">Priority Level</label>
                        <InputSelect @bind-Value="claimModel.PriorityLevel" class="form-select" id="priorityLevel">
                            <option value="1">High (1)</option>
                            <option value="2">Medium-High (2)</option>
                            <option value="3">Medium (3)</option>
                            <option value="4">Medium-Low (4)</option>
                            <option value="5">Low (5)</option>
                        </InputSelect>
                        <div class="form-text">Lower numbers = higher priority</div>
                    </div>
                </div>
            </div>

            <!-- Submit Actions -->
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-paper-plane me-2"></i>Submit Claim</h5>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-success" disabled="@isSubmitting">
                            @if (isSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                <text>Submitting...</text>
                            }
                            else
                            {
                                <i class="fas fa-paper-plane me-2"></i>
                                <text>Submit Claim</text>
                            }
                        </button>
                        <a href="/claims" class="btn btn-outline-secondary">
                            <i class="fas fa-times me-2"></i>Cancel
                        </a>
                    </div>
                    <div class="mt-3">
                        <small class="text-muted">
                            <i class="fas fa-info-circle me-1"></i>
                            Claims are typically processed within 1-3 business days.
                        </small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private ClaimSubmissionModel claimModel = new();
    private List<PatientDto> patients = new();
    private List<ProviderDto> providers = new();
    private List<InsurancePlanDto> insurancePlans = new();
    private string diagnosisCodesText = string.Empty;
    private string procedureCodesText = string.Empty;
    private string diagnosisSearchTerm = string.Empty;
    private string procedureSearchTerm = string.Empty;
    private List<DiagnosisCodeDto> diagnosisSearchResults = new();
    private List<ProcedureCodeDto> procedureSearchResults = new();
    private bool isSubmitting = false;
    private string? successMessage;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            patients = await PatientService.GetAllPatientsAsync();
            providers = await ProviderService.GetAllProvidersAsync();
            insurancePlans = await InsurancePlanService.GetAllInsurancePlansAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading form data: {ex.Message}";
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            isSubmitting = true;
            errorMessage = null;
            successMessage = null;

            // Parse diagnosis and procedure codes
            var diagnosisCodes = ParseCodes(diagnosisCodesText);
            var procedureCodes = ParseCodes(procedureCodesText);

            var request = new SubmitClaimRequest(
                claimModel.PatientId,
                claimModel.InsurancePlanId,
                claimModel.ProviderId,
                claimModel.ClaimType,
                claimModel.TotalAmount,
                claimModel.ServiceDate.ToString("yyyy-MM-dd"),
                diagnosisCodes,
                procedureCodes,
                claimModel.PriorityLevel
            );

            var response = await ClaimsService.SubmitClaimAsync(request);

            if (response.Success)
            {
                successMessage = $"Claim {response.ClaimNumber} submitted successfully!";
                
                // Reset form
                claimModel = new ClaimSubmissionModel();
                diagnosisCodesText = string.Empty;
                procedureCodesText = string.Empty;

                // Navigate to claim details after a short delay
                await Task.Delay(2000);
                if (response.ClaimId.HasValue)
                {
                    Navigation.NavigateTo($"/claims/{response.ClaimId.Value}");
                }
                else
                {
                    Navigation.NavigateTo("/claims");
                }
            }
            else
            {
                errorMessage = response.Message ?? "Failed to submit claim";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error submitting claim: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task SearchDiagnosisCodes(ChangeEventArgs e)
    {
        diagnosisSearchTerm = e.Value?.ToString() ?? string.Empty;
        
        if (string.IsNullOrWhiteSpace(diagnosisSearchTerm) || diagnosisSearchTerm.Length < 2)
        {
            diagnosisSearchResults.Clear();
            return;
        }

        try
        {
            diagnosisSearchResults = await MedicalCodesService.SearchDiagnosisCodesAsync(diagnosisSearchTerm, 10);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error searching diagnosis codes: {ex.Message}";
            diagnosisSearchResults.Clear();
        }
    }

    private async Task SearchProcedureCodes(ChangeEventArgs e)
    {
        procedureSearchTerm = e.Value?.ToString() ?? string.Empty;
        
        if (string.IsNullOrWhiteSpace(procedureSearchTerm) || procedureSearchTerm.Length < 2)
        {
            procedureSearchResults.Clear();
            return;
        }

        try
        {
            procedureSearchResults = await MedicalCodesService.SearchProcedureCodesAsync(procedureSearchTerm, 10);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error searching procedure codes: {ex.Message}";
            procedureSearchResults.Clear();
        }
    }

    private void AddDiagnosisCode(DiagnosisCodeDto code)
    {
        var existingCodes = ParseCodes(diagnosisCodesText);
        if (!existingCodes.Contains(code.Code))
        {
            diagnosisCodesText = string.IsNullOrEmpty(diagnosisCodesText) ? 
                code.Code : 
                diagnosisCodesText + Environment.NewLine + code.Code;
        }
        
        // Clear search
        diagnosisSearchTerm = string.Empty;
        diagnosisSearchResults.Clear();
    }

    private void AddProcedureCode(ProcedureCodeDto code)
    {
        var existingCodes = ParseCodes(procedureCodesText);
        if (!existingCodes.Contains(code.Code))
        {
            procedureCodesText = string.IsNullOrEmpty(procedureCodesText) ? 
                code.Code : 
                procedureCodesText + Environment.NewLine + code.Code;
        }
        
        // Clear search
        procedureSearchTerm = string.Empty;
        procedureSearchResults.Clear();
    }

    private void ClearDiagnosisSearch()
    {
        diagnosisSearchTerm = string.Empty;
        diagnosisSearchResults.Clear();
    }

    private void ClearProcedureSearch()
    {
        procedureSearchTerm = string.Empty;
        procedureSearchResults.Clear();
    }

    private List<string> ParseCodes(string codesText)
    {
        if (string.IsNullOrWhiteSpace(codesText))
            return new List<string>();

        return codesText
            .Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries)
            .Select(code => code.Trim())
            .Where(code => !string.IsNullOrWhiteSpace(code))
            .ToList();
    }

    public class ClaimSubmissionModel
    {
        [Required(ErrorMessage = "Patient is required")]
        public int PatientId { get; set; }

        [Required(ErrorMessage = "Provider is required")]
        public int ProviderId { get; set; }

        [Required(ErrorMessage = "Insurance Plan is required")]
        public int InsurancePlanId { get; set; }

        [Required(ErrorMessage = "Claim Type is required")]
        public string ClaimType { get; set; } = string.Empty;

        [Required(ErrorMessage = "Service Date is required")]
        public DateTime ServiceDate { get; set; } = DateTime.Today;

        [Required(ErrorMessage = "Total Amount is required")]
        [Range(0.01, double.MaxValue, ErrorMessage = "Total Amount must be greater than 0")]
        public decimal TotalAmount { get; set; }

        [Range(1, 5, ErrorMessage = "Priority Level must be between 1 and 5")]
        public int PriorityLevel { get; set; } = 3;
    }
}